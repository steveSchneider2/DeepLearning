# -*- coding: utf-8 -*-
"""TF2.0 ANN Regression

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XDvj0pjF_Sc1SVSbAw6zv1RcnLlqOo2u
    
    for the 3-d grid look here:
https://www.geeksforgeeks.org/tri-surface-plot-in-python-using-matplotlib/

UDEMY TENSORFLOW 2.0 LECTURE 29  ANN artificial 1,000 RECORDS
RUNNING ON GPU: TAKES 6.8 SECONDS
"""

# Commented out IPython magic to ensure Python compatibility.
# Install TensorFlow
# !pip install -q tensorflow-gpu==2.0.0-beta1

# try:
# #   %tensorflow_version 2.x  # Colab only.
# except Exception:
#   pass

import tensorflow as tf
# Other imports
import numpy as np
import pandas as pd
import os
import sys
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import time

from tensorflow.python.client import device_lib 
print(device_lib.list_local_devices())
print('Conda Envronment:  ', os.environ['CONDA_DEFAULT_ENV'])
print(f'Gpu  Support:       {tf.test.is_built_with_gpu_support()}')
print(f'Cuda Support:       {tf.test.is_built_with_cuda()}')
print(f'Tensor Flow:        {tf.version.VERSION}')
pver = str(format(sys.version_info.major) +'.'+ format(sys.version_info.minor)+'.'+ format(sys.version_info.micro))
print('Python version:      {}.'.format(pver)) 
print('The numpy version:   {}.'.format(np.__version__))
print('The panda version:   {}.'.format(pd.__version__))

starttime = time.perf_counter()
modelstart = time.strftime('%c')

#%% Make the dataset
N = 1000
X = np.random.random((N, 2)) * 6 - 3 # uniformly distributed between (-3, +3)
Y = np.cos(2*X[:,0]) + np.cos(3*X[:,1])

"""This implements the function:

$$ y = \cos(2x_1) + cos(3x_2) $$
"""

#%% Plot it
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(X[:,0], X[:,1], Y)
plt.show()

#%% Build the model
model = tf.keras.models.Sequential([
  tf.keras.layers.Dense(128, input_shape=(2,), activation='relu'),
  tf.keras.layers.Dense(1)
])

#%% Compile and fit
opt = tf.keras.optimizers.Adam(0.01)  # Learning RATE = .01
model.compile(optimizer=opt, loss='mse')
r = model.fit(X, Y, epochs=100);

endtime = time.perf_counter()
duration = round(endtime - starttime,3)

r.history['loss']
type(r.history['loss'])

#%% Plot the loss
plt.plot(r.history['loss'], label='loss')
plt.show()


condaenv = os.environ['CONDA_DEFAULT_ENV']

#%% Plot the prediction surface
plt.style.use('classic')
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(X[:,0], X[:,1], Y)
ax.set_title(f'Udemy TensorFlow 2.0 Lecture 29.   {modelstart}\n' +
          'Artificial Neural Network: Linear Regression' +
          f' {X.shape[0]} records {X.shape[1]} fields' + 
          f'\nDuration: {duration}', fontsize=10)

#%% surface plot  21 2021 june not working. not concernded now.
line = np.linspace(-3, 3, 50)
xx, yy = np.meshgrid(line, line)
Xgrid = np.vstack((xx.flatten(), yy.flatten())).T
Yhat = model.predict(Xgrid).flatten()
ax.plot_trisurf(Xgrid[:,0], Xgrid[:,1], Yhat, linewidth=0.2, antialiased=True)
ax.set_xlabel('tf2_ANN_regression.py')
ax.set_ylabel('Cosine randomized data')
plt.text(x= .5, y= .7,# transform=trans1,
         s=f'Conda Envr:  {condaenv}\n' +
         f'Gpu  Support:       {tf.test.is_built_with_gpu_support()}\n' +
         f'Cuda Support:       {tf.test.is_built_with_cuda()}\n' +
         f'Tensor Flow:        {tf.version.VERSION}\n'+
         f'Python:             {pver}',
         wrap=True, ha='left', va='top',
         fontsize=9, bbox=dict(facecolor='pink', alpha=0.5))
plt.show()

#%% Can it extrapolate?
# Plot the prediction surface ... no!
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(X[:,0], X[:,1], Y)

#%% surface plot
line = np.linspace(-5, 5, 50)
xx, yy = np.meshgrid(line, line)
Xgrid = np.vstack((xx.flatten(), yy.flatten())).T
Yhat = model.predict(Xgrid).flatten()
ax.plot_trisurf(Xgrid[:,0], Xgrid[:,1], Yhat, linewidth=0.2, antialiased=True)
plt.show()